<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2013.1.4 (Build 801)" ts="2017-10-31 08:39:18">
<Class name="HTML.js.bootstrap.v400.bootstrap.min">
<Description><![CDATA[

///<br>Скрипт(JS):
///<br> &lt;script src='HTML.js.bootstrap.v400.bootstrap.min.cls'&gt;&lt;/script&gt; 
///<br> <!--  <script src='HTML.js.bootstrap.v400.bootstrap.min.cls'></script>   -->
///]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64560,2473.397684</TimeChanged>
<TimeCreated>64560,2473.387697</TimeCreated>

<Method name="OnPage">
<Description>
04/10/2017  00:41:13</Description>
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
   w $system.Encryption.Base64Decode(..#Frag1)
     Quit $$$OK 
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
    Do %response.SetHeader("Content-Type","application/x-javascript") 
    if $d(%request.Data("download",1))
    {
       Do %response.SetHeader("Content-Disposition: attachment; filename=","bootstrap.min.js") 
       Do %response.SetHeader("Content-Length","44957") 
    }
    q 1  
]]></Implementation>
</Method>

<Parameter name="FileName">
<Default>bootstrap.min.js</Default>
</Parameter>

<Parameter name="Frag1">
<Default></Default>
</Parameter>
</Class>
</Export>
